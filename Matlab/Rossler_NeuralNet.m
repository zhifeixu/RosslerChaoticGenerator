function [y1,xf1] = Rossler_NeuralNet(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 19-Apr-2021 12:31:11.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x1 matrix, initial 1 delay states for input #1.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 3x1 matrix, final 1 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [2;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.1017041891290695332;-3.509108718728506382;3.3246597636241888019;-2.1699268616627671591;3.2542397371625528812;-1.5093288425161139887;0.62634630231450028059;1.4732014703897955421;0.27094695152384584702;-0.10258621270142366522;0.026875628244393112015;1.1046732460802590747;0.15962048163824224534;1.6242783487012899535;1.7790059428500684113;3.4916440834872006782;1.4356841189530271663;-4.3697872061953484391;-4.3821388062575792333;2.9681886535512580494];
IW1_1 = [-1.2052508491243405508 2.5350766791781320642 -2.3001454218868060408;1.5028882343963589907 -2.1680779705668995483 2.3759234047540878088;-1.2689167957106335383 2.4261332335130552096 -2.3246474765384190775;1.6683563383562514115 -2.5919038144030288606 -0.59038287913994025313;-3.0304320573760787916 -0.87103255122977474301 -1.1675438895168368525;1.0946126898434294095 -2.0537419686507352168 1.2702965112400921299;-0.27631269028288085732 -0.016625060996039872641 -0.32247457266110646223;-0.49034081230074116897 -0.030114091344010981977 0.60286466339608979492;-1.2881797525505771507 -1.1073583162560693971 3.1255556111717446299;0.10901064764612625191 0.1417255234788266649 0.064672621860391327209;0.35506651064334399104 0.025707398588206777784 -0.43360434145735987643;1.4956306310369502643 1.0097288083786926105 -3.1029395290484087511;0.11299252645790139327 -0.2146327564620602868 0.16726776733802981023;2.0759977986302291519 0.5776694041639371946 -2.3754520021797405072;2.2612467525587187644 0.72469423107150610086 -2.6082824730286593429;1.7600817673256878848 1.323112593297646411 -2.2936992564295648478;0.47622144013422268438 0.64553591937648946431 0.21581513923212128359;-0.51909382575176732377 2.3504537011129560398 1.801089403491407559;-1.3123511607542879265 2.2197649661470921778 2.2069273035839311881;0.69693542153956244967 -1.3484867539374156831 1.0112396847431439628];

% Layer 2
b2 = [-0.59281491019938892251;-0.051035225522110011509;-0.32588867388349657128];
LW2_1 = [-0.47921955871658555859 0.37331482257153880688 0.60318174400441981753 0.0011696899793432983129 -0.013013155234985128786 0.020312715811731250209 0.023356094187708818094 -0.5632857952630990761 0.00096572720395745627591 2.8225719532555197944 1.0795641210511286445 -0.0047958183787715985905 2.0969290315422237647 0.29827614443142014267 -0.33129982747158925882 0.79481986701836770948 0.08245384736040037299 0.32752052381503848899 -0.7525349329287929212 0.02720385068496215808;-0.13634835555153831943 -0.24311412136193039091 -0.3349077731797108215 -0.0014058527909256099148 0.016905672663166976255 -0.020893570461050000459 -0.016275771962094839201 0.15225921061572333937 0.00016153157055105813594 3.6118161306903107111 -0.28269261161968056717 0.0031623152116082653765 -2.2726527284609816526 -0.0071649349189385688752 -0.018018785332376729275 0.68984106633904362926 0.11562997347958314798 -0.23616097273072594875 0.12098761090038097354 -0.03061851962328921567;0.26264162355182169017 0.13211993295477106325 0.081174896988630937389 0.00061121955348588069383 -0.017624204700736511436 0.0075848837229339511473 -1.4103180448264980296 0.79259308702159925186 -0.0021388125994798528294 1.2602387325624233583 -0.71094508689594548834 0.0021066777542095862195 0.76437005547281478002 0.069970791467323753543 -0.091725944007985532602 -0.21528980965343263998 0.041744117925318791062 -0.2549055702521065836 -0.082128541161245682822 0.0085879024479075215248];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [2;2;2];
y1_step1.xoffset = [0;0;0];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-1-1,2)+1),3,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
